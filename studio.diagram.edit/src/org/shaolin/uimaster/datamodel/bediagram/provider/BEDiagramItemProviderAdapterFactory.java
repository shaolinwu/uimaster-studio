/**
 */
package org.shaolin.uimaster.datamodel.bediagram.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.shaolin.uimaster.datamodel.bediagram.util.BEDiagramAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BEDiagramItemProviderAdapterFactory extends BEDiagramAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BEDiagramItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BEComplexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BEComplexTypeItemProvider beComplexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BEComplexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBEComplexTypeAdapter() {
		if (beComplexTypeItemProvider == null) {
			beComplexTypeItemProvider = new BEComplexTypeItemProvider(this);
		}

		return beComplexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BEDiagramType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BEDiagramTypeItemProvider beDiagramTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BEDiagramType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBEDiagramTypeAdapter() {
		if (beDiagramTypeItemProvider == null) {
			beDiagramTypeItemProvider = new BEDiagramTypeItemProvider(this);
		}

		return beDiagramTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BEListType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BEListTypeItemProvider beListTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BEListType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBEListTypeAdapter() {
		if (beListTypeItemProvider == null) {
			beListTypeItemProvider = new BEListTypeItemProvider(this);
		}

		return beListTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BEMapType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BEMapTypeItemProvider beMapTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BEMapType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBEMapTypeAdapter() {
		if (beMapTypeItemProvider == null) {
			beMapTypeItemProvider = new BEMapTypeItemProvider(this);
		}

		return beMapTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BEObjRefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BEObjRefTypeItemProvider beObjRefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BEObjRefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBEObjRefTypeAdapter() {
		if (beObjRefTypeItemProvider == null) {
			beObjRefTypeItemProvider = new BEObjRefTypeItemProvider(this);
		}

		return beObjRefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BEPrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BEPrimitiveTypeItemProvider bePrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BEPrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBEPrimitiveTypeAdapter() {
		if (bePrimitiveTypeItemProvider == null) {
			bePrimitiveTypeItemProvider = new BEPrimitiveTypeItemProvider(this);
		}

		return bePrimitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BESetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BESetTypeItemProvider beSetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BESetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBESetTypeAdapter() {
		if (beSetTypeItemProvider == null) {
			beSetTypeItemProvider = new BESetTypeItemProvider(this);
		}

		return beSetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BEType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BETypeItemProvider beTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BEType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBETypeAdapter() {
		if (beTypeItemProvider == null) {
			beTypeItemProvider = new BETypeItemProvider(this);
		}

		return beTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BinaryType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryTypeItemProvider binaryTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BinaryType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryTypeAdapter() {
		if (binaryTypeItemProvider == null) {
			binaryTypeItemProvider = new BinaryTypeItemProvider(this);
		}

		return binaryTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BooleanType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanTypeItemProvider booleanTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BooleanType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanTypeAdapter() {
		if (booleanTypeItemProvider == null) {
			booleanTypeItemProvider = new BooleanTypeItemProvider(this);
		}

		return booleanTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.BusinessEntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessEntityTypeItemProvider businessEntityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.BusinessEntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessEntityTypeAdapter() {
		if (businessEntityTypeItemProvider == null) {
			businessEntityTypeItemProvider = new BusinessEntityTypeItemProvider(this);
		}

		return businessEntityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.CEObjRefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CEObjRefTypeItemProvider ceObjRefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.CEObjRefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCEObjRefTypeAdapter() {
		if (ceObjRefTypeItemProvider == null) {
			ceObjRefTypeItemProvider = new CEObjRefTypeItemProvider(this);
		}

		return ceObjRefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.ConstantEntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantEntityTypeItemProvider constantEntityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.ConstantEntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantEntityTypeAdapter() {
		if (constantEntityTypeItemProvider == null) {
			constantEntityTypeItemProvider = new ConstantEntityTypeItemProvider(this);
		}

		return constantEntityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.ConstantValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantValueTypeItemProvider constantValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.ConstantValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantValueTypeAdapter() {
		if (constantValueTypeItemProvider == null) {
			constantValueTypeItemProvider = new ConstantValueTypeItemProvider(this);
		}

		return constantValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.DateTimeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateTimeTypeItemProvider dateTimeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.DateTimeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateTimeTypeAdapter() {
		if (dateTimeTypeItemProvider == null) {
			dateTimeTypeItemProvider = new DateTimeTypeItemProvider(this);
		}

		return dateTimeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.DoubleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleTypeItemProvider doubleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.DoubleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoubleTypeAdapter() {
		if (doubleTypeItemProvider == null) {
			doubleTypeItemProvider = new DoubleTypeItemProvider(this);
		}

		return doubleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.DummyFieldType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DummyFieldTypeItemProvider dummyFieldTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.DummyFieldType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDummyFieldTypeAdapter() {
		if (dummyFieldTypeItemProvider == null) {
			dummyFieldTypeItemProvider = new DummyFieldTypeItemProvider(this);
		}

		return dummyFieldTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.EntityNameWebServiceMappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityNameWebServiceMappingTypeItemProvider entityNameWebServiceMappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.EntityNameWebServiceMappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityNameWebServiceMappingTypeAdapter() {
		if (entityNameWebServiceMappingTypeItemProvider == null) {
			entityNameWebServiceMappingTypeItemProvider = new EntityNameWebServiceMappingTypeItemProvider(this);
		}

		return entityNameWebServiceMappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.EntityRelationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityRelationTypeItemProvider entityRelationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.EntityRelationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityRelationTypeAdapter() {
		if (entityRelationTypeItemProvider == null) {
			entityRelationTypeItemProvider = new EntityRelationTypeItemProvider(this);
		}

		return entityRelationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.ExternalReferenceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalReferenceTypeItemProvider externalReferenceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.ExternalReferenceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalReferenceTypeAdapter() {
		if (externalReferenceTypeItemProvider == null) {
			externalReferenceTypeItemProvider = new ExternalReferenceTypeItemProvider(this);
		}

		return externalReferenceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.FileType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileTypeItemProvider fileTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.FileType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileTypeAdapter() {
		if (fileTypeItemProvider == null) {
			fileTypeItemProvider = new FileTypeItemProvider(this);
		}

		return fileTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.IntType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntTypeItemProvider intTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.IntType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntTypeAdapter() {
		if (intTypeItemProvider == null) {
			intTypeItemProvider = new IntTypeItemProvider(this);
		}

		return intTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.JavaObjRefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaObjRefTypeItemProvider javaObjRefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.JavaObjRefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaObjRefTypeAdapter() {
		if (javaObjRefTypeItemProvider == null) {
			javaObjRefTypeItemProvider = new JavaObjRefTypeItemProvider(this);
		}

		return javaObjRefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.LongType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongTypeItemProvider longTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.LongType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLongTypeAdapter() {
		if (longTypeItemProvider == null) {
			longTypeItemProvider = new LongTypeItemProvider(this);
		}

		return longTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.MemberType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemberTypeItemProvider memberTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.MemberType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemberTypeAdapter() {
		if (memberTypeItemProvider == null) {
			memberTypeItemProvider = new MemberTypeItemProvider(this);
		}

		return memberTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.MemberWebServiceMappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemberWebServiceMappingTypeItemProvider memberWebServiceMappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.MemberWebServiceMappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemberWebServiceMappingTypeAdapter() {
		if (memberWebServiceMappingTypeItemProvider == null) {
			memberWebServiceMappingTypeItemProvider = new MemberWebServiceMappingTypeItemProvider(this);
		}

		return memberWebServiceMappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.PersistentConfigType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersistentConfigTypeItemProvider persistentConfigTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.PersistentConfigType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersistentConfigTypeAdapter() {
		if (persistentConfigTypeItemProvider == null) {
			persistentConfigTypeItemProvider = new PersistentConfigTypeItemProvider(this);
		}

		return persistentConfigTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.ReferenceObjectType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceObjectTypeItemProvider referenceObjectTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.ReferenceObjectType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceObjectTypeAdapter() {
		if (referenceObjectTypeItemProvider == null) {
			referenceObjectTypeItemProvider = new ReferenceObjectTypeItemProvider(this);
		}

		return referenceObjectTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.RelationConstraintType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationConstraintTypeItemProvider relationConstraintTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.RelationConstraintType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationConstraintTypeAdapter() {
		if (relationConstraintTypeItemProvider == null) {
			relationConstraintTypeItemProvider = new RelationConstraintTypeItemProvider(this);
		}

		return relationConstraintTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.RelationKeyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationKeyTypeItemProvider relationKeyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.RelationKeyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationKeyTypeAdapter() {
		if (relationKeyTypeItemProvider == null) {
			relationKeyTypeItemProvider = new RelationKeyTypeItemProvider(this);
		}

		return relationKeyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.SearchMethodType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SearchMethodTypeItemProvider searchMethodTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.SearchMethodType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSearchMethodTypeAdapter() {
		if (searchMethodTypeItemProvider == null) {
			searchMethodTypeItemProvider = new SearchMethodTypeItemProvider(this);
		}

		return searchMethodTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.StringType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringTypeItemProvider stringTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.StringType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringTypeAdapter() {
		if (stringTypeItemProvider == null) {
			stringTypeItemProvider = new StringTypeItemProvider(this);
		}

		return stringTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.TimeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeTypeItemProvider timeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.TimeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeTypeAdapter() {
		if (timeTypeItemProvider == null) {
			timeTypeItemProvider = new TimeTypeItemProvider(this);
		}

		return timeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.bediagram.ValidatorConfigType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidatorConfigTypeItemProvider validatorConfigTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.bediagram.ValidatorConfigType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidatorConfigTypeAdapter() {
		if (validatorConfigTypeItemProvider == null) {
			validatorConfigTypeItemProvider = new ValidatorConfigTypeItemProvider(this);
		}

		return validatorConfigTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (beComplexTypeItemProvider != null) beComplexTypeItemProvider.dispose();
		if (beDiagramTypeItemProvider != null) beDiagramTypeItemProvider.dispose();
		if (beListTypeItemProvider != null) beListTypeItemProvider.dispose();
		if (beMapTypeItemProvider != null) beMapTypeItemProvider.dispose();
		if (beObjRefTypeItemProvider != null) beObjRefTypeItemProvider.dispose();
		if (bePrimitiveTypeItemProvider != null) bePrimitiveTypeItemProvider.dispose();
		if (beSetTypeItemProvider != null) beSetTypeItemProvider.dispose();
		if (beTypeItemProvider != null) beTypeItemProvider.dispose();
		if (binaryTypeItemProvider != null) binaryTypeItemProvider.dispose();
		if (booleanTypeItemProvider != null) booleanTypeItemProvider.dispose();
		if (businessEntityTypeItemProvider != null) businessEntityTypeItemProvider.dispose();
		if (ceObjRefTypeItemProvider != null) ceObjRefTypeItemProvider.dispose();
		if (constantEntityTypeItemProvider != null) constantEntityTypeItemProvider.dispose();
		if (constantValueTypeItemProvider != null) constantValueTypeItemProvider.dispose();
		if (dateTimeTypeItemProvider != null) dateTimeTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (doubleTypeItemProvider != null) doubleTypeItemProvider.dispose();
		if (dummyFieldTypeItemProvider != null) dummyFieldTypeItemProvider.dispose();
		if (entityNameWebServiceMappingTypeItemProvider != null) entityNameWebServiceMappingTypeItemProvider.dispose();
		if (entityRelationTypeItemProvider != null) entityRelationTypeItemProvider.dispose();
		if (externalReferenceTypeItemProvider != null) externalReferenceTypeItemProvider.dispose();
		if (fileTypeItemProvider != null) fileTypeItemProvider.dispose();
		if (intTypeItemProvider != null) intTypeItemProvider.dispose();
		if (javaObjRefTypeItemProvider != null) javaObjRefTypeItemProvider.dispose();
		if (longTypeItemProvider != null) longTypeItemProvider.dispose();
		if (memberTypeItemProvider != null) memberTypeItemProvider.dispose();
		if (memberWebServiceMappingTypeItemProvider != null) memberWebServiceMappingTypeItemProvider.dispose();
		if (persistentConfigTypeItemProvider != null) persistentConfigTypeItemProvider.dispose();
		if (referenceObjectTypeItemProvider != null) referenceObjectTypeItemProvider.dispose();
		if (relationConstraintTypeItemProvider != null) relationConstraintTypeItemProvider.dispose();
		if (relationKeyTypeItemProvider != null) relationKeyTypeItemProvider.dispose();
		if (searchMethodTypeItemProvider != null) searchMethodTypeItemProvider.dispose();
		if (stringTypeItemProvider != null) stringTypeItemProvider.dispose();
		if (timeTypeItemProvider != null) timeTypeItemProvider.dispose();
		if (validatorConfigTypeItemProvider != null) validatorConfigTypeItemProvider.dispose();
	}

}
