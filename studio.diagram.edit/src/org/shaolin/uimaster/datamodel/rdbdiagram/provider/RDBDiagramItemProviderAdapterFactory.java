/**
 */
package org.shaolin.uimaster.datamodel.rdbdiagram.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.shaolin.uimaster.datamodel.rdbdiagram.util.RDBDiagramAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RDBDiagramItemProviderAdapterFactory extends RDBDiagramAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RDBDiagramItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.ClassMappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassMappingTypeItemProvider classMappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.ClassMappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassMappingTypeAdapter() {
		if (classMappingTypeItemProvider == null) {
			classMappingTypeItemProvider = new ClassMappingTypeItemProvider(this);
		}

		return classMappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.ColumnType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnTypeItemProvider columnTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.ColumnType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnTypeAdapter() {
		if (columnTypeItemProvider == null) {
			columnTypeItemProvider = new ColumnTypeItemProvider(this);
		}

		return columnTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.FieldMappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldMappingTypeItemProvider fieldMappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.FieldMappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldMappingTypeAdapter() {
		if (fieldMappingTypeItemProvider == null) {
			fieldMappingTypeItemProvider = new FieldMappingTypeItemProvider(this);
		}

		return fieldMappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.FKType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FKTypeItemProvider fkTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.FKType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFKTypeAdapter() {
		if (fkTypeItemProvider == null) {
			fkTypeItemProvider = new FKTypeItemProvider(this);
		}

		return fkTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.IndexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexTypeItemProvider indexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.IndexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexTypeAdapter() {
		if (indexTypeItemProvider == null) {
			indexTypeItemProvider = new IndexTypeItemProvider(this);
		}

		return indexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.InheritAssociationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InheritAssociationTypeItemProvider inheritAssociationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.InheritAssociationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInheritAssociationTypeAdapter() {
		if (inheritAssociationTypeItemProvider == null) {
			inheritAssociationTypeItemProvider = new InheritAssociationTypeItemProvider(this);
		}

		return inheritAssociationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.JoinTableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinTableTypeItemProvider joinTableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.JoinTableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinTableTypeAdapter() {
		if (joinTableTypeItemProvider == null) {
			joinTableTypeItemProvider = new JoinTableTypeItemProvider(this);
		}

		return joinTableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.ListFieldMappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListFieldMappingTypeItemProvider listFieldMappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.ListFieldMappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListFieldMappingTypeAdapter() {
		if (listFieldMappingTypeItemProvider == null) {
			listFieldMappingTypeItemProvider = new ListFieldMappingTypeItemProvider(this);
		}

		return listFieldMappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.PKType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PKTypeItemProvider pkTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.PKType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPKTypeAdapter() {
		if (pkTypeItemProvider == null) {
			pkTypeItemProvider = new PKTypeItemProvider(this);
		}

		return pkTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.RDBDiagramType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDBDiagramTypeItemProvider rdbDiagramTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.RDBDiagramType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDBDiagramTypeAdapter() {
		if (rdbDiagramTypeItemProvider == null) {
			rdbDiagramTypeItemProvider = new RDBDiagramTypeItemProvider(this);
		}

		return rdbDiagramTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.RDBType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDBTypeItemProvider rdbTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.RDBType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDBTypeAdapter() {
		if (rdbTypeItemProvider == null) {
			rdbTypeItemProvider = new RDBTypeItemProvider(this);
		}

		return rdbTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.SequenceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceTypeItemProvider sequenceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.SequenceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceTypeAdapter() {
		if (sequenceTypeItemProvider == null) {
			sequenceTypeItemProvider = new SequenceTypeItemProvider(this);
		}

		return sequenceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.TableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableTypeItemProvider tableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.TableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableTypeAdapter() {
		if (tableTypeItemProvider == null) {
			tableTypeItemProvider = new TableTypeItemProvider(this);
		}

		return tableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.rdbdiagram.ViewType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewTypeItemProvider viewTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.rdbdiagram.ViewType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewTypeAdapter() {
		if (viewTypeItemProvider == null) {
			viewTypeItemProvider = new ViewTypeItemProvider(this);
		}

		return viewTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (classMappingTypeItemProvider != null) classMappingTypeItemProvider.dispose();
		if (columnTypeItemProvider != null) columnTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (fieldMappingTypeItemProvider != null) fieldMappingTypeItemProvider.dispose();
		if (fkTypeItemProvider != null) fkTypeItemProvider.dispose();
		if (indexTypeItemProvider != null) indexTypeItemProvider.dispose();
		if (inheritAssociationTypeItemProvider != null) inheritAssociationTypeItemProvider.dispose();
		if (joinTableTypeItemProvider != null) joinTableTypeItemProvider.dispose();
		if (listFieldMappingTypeItemProvider != null) listFieldMappingTypeItemProvider.dispose();
		if (pkTypeItemProvider != null) pkTypeItemProvider.dispose();
		if (rdbDiagramTypeItemProvider != null) rdbDiagramTypeItemProvider.dispose();
		if (rdbTypeItemProvider != null) rdbTypeItemProvider.dispose();
		if (sequenceTypeItemProvider != null) sequenceTypeItemProvider.dispose();
		if (tableTypeItemProvider != null) tableTypeItemProvider.dispose();
		if (viewTypeItemProvider != null) viewTypeItemProvider.dispose();
	}

}
