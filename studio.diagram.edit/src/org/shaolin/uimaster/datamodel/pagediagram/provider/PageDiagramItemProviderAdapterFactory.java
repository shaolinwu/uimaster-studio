/**
 */
package org.shaolin.uimaster.datamodel.pagediagram.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.shaolin.uimaster.datamodel.pagediagram.util.PageDiagramAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PageDiagramItemProviderAdapterFactory extends PageDiagramAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PageDiagramItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.ConditionalOutType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalOutTypeItemProvider conditionalOutTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.ConditionalOutType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalOutTypeAdapter() {
		if (conditionalOutTypeItemProvider == null) {
			conditionalOutTypeItemProvider = new ConditionalOutTypeItemProvider(this);
		}

		return conditionalOutTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.DisplayNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisplayNodeTypeItemProvider displayNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.DisplayNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplayNodeTypeAdapter() {
		if (displayNodeTypeItemProvider == null) {
			displayNodeTypeItemProvider = new DisplayNodeTypeItemProvider(this);
		}

		return displayNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.DisplayOutType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisplayOutTypeItemProvider displayOutTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.DisplayOutType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplayOutTypeAdapter() {
		if (displayOutTypeItemProvider == null) {
			displayOutTypeItemProvider = new DisplayOutTypeItemProvider(this);
		}

		return displayOutTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.DynamicOutType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DynamicOutTypeItemProvider dynamicOutTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.DynamicOutType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDynamicOutTypeAdapter() {
		if (dynamicOutTypeItemProvider == null) {
			dynamicOutTypeItemProvider = new DynamicOutTypeItemProvider(this);
		}

		return dynamicOutTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.FlowNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowNodeTypeItemProvider flowNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.FlowNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowNodeTypeAdapter() {
		if (flowNodeTypeItemProvider == null) {
			flowNodeTypeItemProvider = new FlowNodeTypeItemProvider(this);
		}

		return flowNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.LogicNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicNodeTypeItemProvider logicNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.LogicNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicNodeTypeAdapter() {
		if (logicNodeTypeItemProvider == null) {
			logicNodeTypeItemProvider = new LogicNodeTypeItemProvider(this);
		}

		return logicNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.NextType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NextTypeItemProvider nextTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.NextType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNextTypeAdapter() {
		if (nextTypeItemProvider == null) {
			nextTypeItemProvider = new NextTypeItemProvider(this);
		}

		return nextTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.PageNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageNodeTypeItemProvider pageNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.PageNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageNodeTypeAdapter() {
		if (pageNodeTypeItemProvider == null) {
			pageNodeTypeItemProvider = new PageNodeTypeItemProvider(this);
		}

		return pageNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.StartNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartNodeTypeItemProvider startNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.StartNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartNodeTypeAdapter() {
		if (startNodeTypeItemProvider == null) {
			startNodeTypeItemProvider = new StartNodeTypeItemProvider(this);
		}

		return startNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.pagediagram.WebChunkType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebChunkTypeItemProvider webChunkTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.pagediagram.WebChunkType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebChunkTypeAdapter() {
		if (webChunkTypeItemProvider == null) {
			webChunkTypeItemProvider = new WebChunkTypeItemProvider(this);
		}

		return webChunkTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (conditionalOutTypeItemProvider != null) conditionalOutTypeItemProvider.dispose();
		if (displayNodeTypeItemProvider != null) displayNodeTypeItemProvider.dispose();
		if (displayOutTypeItemProvider != null) displayOutTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (dynamicOutTypeItemProvider != null) dynamicOutTypeItemProvider.dispose();
		if (flowNodeTypeItemProvider != null) flowNodeTypeItemProvider.dispose();
		if (logicNodeTypeItemProvider != null) logicNodeTypeItemProvider.dispose();
		if (nextTypeItemProvider != null) nextTypeItemProvider.dispose();
		if (pageNodeTypeItemProvider != null) pageNodeTypeItemProvider.dispose();
		if (startNodeTypeItemProvider != null) startNodeTypeItemProvider.dispose();
		if (webChunkTypeItemProvider != null) webChunkTypeItemProvider.dispose();
	}

}
