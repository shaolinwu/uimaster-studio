/**
 */
package org.shaolin.uimaster.datamodel.common.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.shaolin.uimaster.datamodel.common.util.CommonAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CommonItemProviderAdapterFactory extends CommonAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CommonItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.CategoryType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryTypeItemProvider categoryTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.CategoryType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryTypeAdapter() {
		if (categoryTypeItemProvider == null) {
			categoryTypeItemProvider = new CategoryTypeItemProvider(this);
		}

		return categoryTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.EntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityTypeItemProvider entityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.EntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityTypeAdapter() {
		if (entityTypeItemProvider == null) {
			entityTypeItemProvider = new EntityTypeItemProvider(this);
		}

		return entityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.ExpressionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionTypeItemProvider expressionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.ExpressionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionTypeAdapter() {
		if (expressionTypeItemProvider == null) {
			expressionTypeItemProvider = new ExpressionTypeItemProvider(this);
		}

		return expressionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.ExtensionPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtensionPropertyTypeItemProvider extensionPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.ExtensionPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtensionPropertyTypeAdapter() {
		if (extensionPropertyTypeItemProvider == null) {
			extensionPropertyTypeItemProvider = new ExtensionPropertyTypeItemProvider(this);
		}

		return extensionPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.I18NMetaDataItemType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected I18NMetaDataItemTypeItemProvider i18NMetaDataItemTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.I18NMetaDataItemType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createI18NMetaDataItemTypeAdapter() {
		if (i18NMetaDataItemTypeItemProvider == null) {
			i18NMetaDataItemTypeItemProvider = new I18NMetaDataItemTypeItemProvider(this);
		}

		return i18NMetaDataItemTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.I18NMetaDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected I18NMetaDataTypeItemProvider i18NMetaDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.I18NMetaDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createI18NMetaDataTypeAdapter() {
		if (i18NMetaDataTypeItemProvider == null) {
			i18NMetaDataTypeItemProvider = new I18NMetaDataTypeItemProvider(this);
		}

		return i18NMetaDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.I18NPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected I18NPropertyTypeItemProvider i18NPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.I18NPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createI18NPropertyTypeAdapter() {
		if (i18NPropertyTypeItemProvider == null) {
			i18NPropertyTypeItemProvider = new I18NPropertyTypeItemProvider(this);
		}

		return i18NPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.ItemRefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemRefTypeItemProvider itemRefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.ItemRefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemRefTypeAdapter() {
		if (itemRefTypeItemProvider == null) {
			itemRefTypeItemProvider = new ItemRefTypeItemProvider(this);
		}

		return itemRefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.MetaDataInfoType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaDataInfoTypeItemProvider metaDataInfoTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.MetaDataInfoType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetaDataInfoTypeAdapter() {
		if (metaDataInfoTypeItemProvider == null) {
			metaDataInfoTypeItemProvider = new MetaDataInfoTypeItemProvider(this);
		}

		return metaDataInfoTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.NameExpressionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameExpressionTypeItemProvider nameExpressionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.NameExpressionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameExpressionTypeAdapter() {
		if (nameExpressionTypeItemProvider == null) {
			nameExpressionTypeItemProvider = new NameExpressionTypeItemProvider(this);
		}

		return nameExpressionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.NameValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameValueTypeItemProvider nameValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.NameValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameValueTypeAdapter() {
		if (nameValueTypeItemProvider == null) {
			nameValueTypeItemProvider = new NameValueTypeItemProvider(this);
		}

		return nameValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.ParamType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamTypeItemProvider paramTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.ParamType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamTypeAdapter() {
		if (paramTypeItemProvider == null) {
			paramTypeItemProvider = new ParamTypeItemProvider(this);
		}

		return paramTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.ResourceBundleIPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceBundleIPropertyTypeItemProvider resourceBundleIPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.ResourceBundleIPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceBundleIPropertyTypeAdapter() {
		if (resourceBundleIPropertyTypeItemProvider == null) {
			resourceBundleIPropertyTypeItemProvider = new ResourceBundleIPropertyTypeItemProvider(this);
		}

		return resourceBundleIPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.StringIPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringIPropertyTypeItemProvider stringIPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.StringIPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringIPropertyTypeAdapter() {
		if (stringIPropertyTypeItemProvider == null) {
			stringIPropertyTypeItemProvider = new StringIPropertyTypeItemProvider(this);
		}

		return stringIPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.TargetEntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetEntityTypeItemProvider targetEntityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.TargetEntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetEntityTypeAdapter() {
		if (targetEntityTypeItemProvider == null) {
			targetEntityTypeItemProvider = new TargetEntityTypeItemProvider(this);
		}

		return targetEntityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.TargetJavaType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetJavaTypeItemProvider targetJavaTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.TargetJavaType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetJavaTypeAdapter() {
		if (targetJavaTypeItemProvider == null) {
			targetJavaTypeItemProvider = new TargetJavaTypeItemProvider(this);
		}

		return targetJavaTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.VariableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableTypeItemProvider variableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.VariableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableTypeAdapter() {
		if (variableTypeItemProvider == null) {
			variableTypeItemProvider = new VariableTypeItemProvider(this);
		}

		return variableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.common.DiagramInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramInfoItemProvider diagramInfoItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.common.DiagramInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramInfoAdapter() {
		if (diagramInfoItemProvider == null) {
			diagramInfoItemProvider = new DiagramInfoItemProvider(this);
		}

		return diagramInfoItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (categoryTypeItemProvider != null) categoryTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (entityTypeItemProvider != null) entityTypeItemProvider.dispose();
		if (expressionTypeItemProvider != null) expressionTypeItemProvider.dispose();
		if (extensionPropertyTypeItemProvider != null) extensionPropertyTypeItemProvider.dispose();
		if (i18NMetaDataItemTypeItemProvider != null) i18NMetaDataItemTypeItemProvider.dispose();
		if (i18NMetaDataTypeItemProvider != null) i18NMetaDataTypeItemProvider.dispose();
		if (i18NPropertyTypeItemProvider != null) i18NPropertyTypeItemProvider.dispose();
		if (itemRefTypeItemProvider != null) itemRefTypeItemProvider.dispose();
		if (metaDataInfoTypeItemProvider != null) metaDataInfoTypeItemProvider.dispose();
		if (nameExpressionTypeItemProvider != null) nameExpressionTypeItemProvider.dispose();
		if (nameValueTypeItemProvider != null) nameValueTypeItemProvider.dispose();
		if (paramTypeItemProvider != null) paramTypeItemProvider.dispose();
		if (resourceBundleIPropertyTypeItemProvider != null) resourceBundleIPropertyTypeItemProvider.dispose();
		if (stringIPropertyTypeItemProvider != null) stringIPropertyTypeItemProvider.dispose();
		if (targetEntityTypeItemProvider != null) targetEntityTypeItemProvider.dispose();
		if (targetJavaTypeItemProvider != null) targetJavaTypeItemProvider.dispose();
		if (variableTypeItemProvider != null) variableTypeItemProvider.dispose();
		if (diagramInfoItemProvider != null) diagramInfoItemProvider.dispose();
	}

}
