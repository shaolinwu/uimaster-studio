/**
 */
package org.shaolin.uimaster.datamodel.page.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.shaolin.uimaster.datamodel.page.util.PageAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PageItemProviderAdapterFactory extends PageAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ArrayPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayPropertyTypeItemProvider arrayPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ArrayPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayPropertyTypeAdapter() {
		if (arrayPropertyTypeItemProvider == null) {
			arrayPropertyTypeItemProvider = new ArrayPropertyTypeItemProvider(this);
		}

		return arrayPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.BooleanPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanPropertyTypeItemProvider booleanPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.BooleanPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanPropertyTypeAdapter() {
		if (booleanPropertyTypeItemProvider == null) {
			booleanPropertyTypeItemProvider = new BooleanPropertyTypeItemProvider(this);
		}

		return booleanPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.CallComponentMappingOp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallComponentMappingOpItemProvider callComponentMappingOpItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.CallComponentMappingOp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallComponentMappingOpAdapter() {
		if (callComponentMappingOpItemProvider == null) {
			callComponentMappingOpItemProvider = new CallComponentMappingOpItemProvider(this);
		}

		return callComponentMappingOpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ClickListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClickListenerTypeItemProvider clickListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ClickListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClickListenerTypeAdapter() {
		if (clickListenerTypeItemProvider == null) {
			clickListenerTypeItemProvider = new ClickListenerTypeItemProvider(this);
		}

		return clickListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ClientActionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClientActionTypeItemProvider clientActionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ClientActionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClientActionTypeAdapter() {
		if (clientActionTypeItemProvider == null) {
			clientActionTypeItemProvider = new ClientActionTypeItemProvider(this);
		}

		return clientActionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ColorPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorPropertyTypeItemProvider colorPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ColorPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorPropertyTypeAdapter() {
		if (colorPropertyTypeItemProvider == null) {
			colorPropertyTypeItemProvider = new ColorPropertyTypeItemProvider(this);
		}

		return colorPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ComponentConstraintType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentConstraintTypeItemProvider componentConstraintTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ComponentConstraintType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentConstraintTypeAdapter() {
		if (componentConstraintTypeItemProvider == null) {
			componentConstraintTypeItemProvider = new ComponentConstraintTypeItemProvider(this);
		}

		return componentConstraintTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ComponentParamType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentParamTypeItemProvider componentParamTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ComponentParamType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentParamTypeAdapter() {
		if (componentParamTypeItemProvider == null) {
			componentParamTypeItemProvider = new ComponentParamTypeItemProvider(this);
		}

		return componentParamTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.CustomListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomListenerTypeItemProvider customListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.CustomListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomListenerTypeAdapter() {
		if (customListenerTypeItemProvider == null) {
			customListenerTypeItemProvider = new CustomListenerTypeItemProvider(this);
		}

		return customListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.DatePropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatePropertyTypeItemProvider datePropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.DatePropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatePropertyTypeAdapter() {
		if (datePropertyTypeItemProvider == null) {
			datePropertyTypeItemProvider = new DatePropertyTypeItemProvider(this);
		}

		return datePropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.DblClickListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DblClickListenerTypeItemProvider dblClickListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.DblClickListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDblClickListenerTypeAdapter() {
		if (dblClickListenerTypeItemProvider == null) {
			dblClickListenerTypeItemProvider = new DblClickListenerTypeItemProvider(this);
		}

		return dblClickListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.DirectComponentMappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectComponentMappingTypeItemProvider directComponentMappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.DirectComponentMappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectComponentMappingTypeAdapter() {
		if (directComponentMappingTypeItemProvider == null) {
			directComponentMappingTypeItemProvider = new DirectComponentMappingTypeItemProvider(this);
		}

		return directComponentMappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.EntityPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityPropertyTypeItemProvider entityPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.EntityPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityPropertyTypeAdapter() {
		if (entityPropertyTypeItemProvider == null) {
			entityPropertyTypeItemProvider = new EntityPropertyTypeItemProvider(this);
		}

		return entityPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.EventListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventListenerTypeItemProvider eventListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.EventListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventListenerTypeAdapter() {
		if (eventListenerTypeItemProvider == null) {
			eventListenerTypeItemProvider = new EventListenerTypeItemProvider(this);
		}

		return eventListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ExpressionParamType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionParamTypeItemProvider expressionParamTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ExpressionParamType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionParamTypeAdapter() {
		if (expressionParamTypeItemProvider == null) {
			expressionParamTypeItemProvider = new ExpressionParamTypeItemProvider(this);
		}

		return expressionParamTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ExpressionPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionPropertyTypeItemProvider expressionPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ExpressionPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionPropertyTypeAdapter() {
		if (expressionPropertyTypeItemProvider == null) {
			expressionPropertyTypeItemProvider = new ExpressionPropertyTypeItemProvider(this);
		}

		return expressionPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.FontPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FontPropertyTypeItemProvider fontPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.FontPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFontPropertyTypeAdapter() {
		if (fontPropertyTypeItemProvider == null) {
			fontPropertyTypeItemProvider = new FontPropertyTypeItemProvider(this);
		}

		return fontPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.FunctionCallType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionCallTypeItemProvider functionCallTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.FunctionCallType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionCallTypeAdapter() {
		if (functionCallTypeItemProvider == null) {
			functionCallTypeItemProvider = new FunctionCallTypeItemProvider(this);
		}

		return functionCallTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.FunctionReconfigurationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionReconfigurationTypeItemProvider functionReconfigurationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.FunctionReconfigurationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionReconfigurationTypeAdapter() {
		if (functionReconfigurationTypeItemProvider == null) {
			functionReconfigurationTypeItemProvider = new FunctionReconfigurationTypeItemProvider(this);
		}

		return functionReconfigurationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.FunctionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionTypeItemProvider functionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.FunctionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionTypeAdapter() {
		if (functionTypeItemProvider == null) {
			functionTypeItemProvider = new FunctionTypeItemProvider(this);
		}

		return functionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ImagePropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImagePropertyTypeItemProvider imagePropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ImagePropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImagePropertyTypeAdapter() {
		if (imagePropertyTypeItemProvider == null) {
			imagePropertyTypeItemProvider = new ImagePropertyTypeItemProvider(this);
		}

		return imagePropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ItemChangeListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemChangeListenerTypeItemProvider itemChangeListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ItemChangeListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemChangeListenerTypeAdapter() {
		if (itemChangeListenerTypeItemProvider == null) {
			itemChangeListenerTypeItemProvider = new ItemChangeListenerTypeItemProvider(this);
		}

		return itemChangeListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.KeyDownListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyDownListenerTypeItemProvider keyDownListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.KeyDownListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyDownListenerTypeAdapter() {
		if (keyDownListenerTypeItemProvider == null) {
			keyDownListenerTypeItemProvider = new KeyDownListenerTypeItemProvider(this);
		}

		return keyDownListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.KeyPressListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyPressListenerTypeItemProvider keyPressListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.KeyPressListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyPressListenerTypeAdapter() {
		if (keyPressListenerTypeItemProvider == null) {
			keyPressListenerTypeItemProvider = new KeyPressListenerTypeItemProvider(this);
		}

		return keyPressListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.KeyUpListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyUpListenerTypeItemProvider keyUpListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.KeyUpListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyUpListenerTypeAdapter() {
		if (keyUpListenerTypeItemProvider == null) {
			keyUpListenerTypeItemProvider = new KeyUpListenerTypeItemProvider(this);
		}

		return keyUpListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.MouseDownListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MouseDownListenerTypeItemProvider mouseDownListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.MouseDownListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMouseDownListenerTypeAdapter() {
		if (mouseDownListenerTypeItemProvider == null) {
			mouseDownListenerTypeItemProvider = new MouseDownListenerTypeItemProvider(this);
		}

		return mouseDownListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.MouseOutListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MouseOutListenerTypeItemProvider mouseOutListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.MouseOutListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMouseOutListenerTypeAdapter() {
		if (mouseOutListenerTypeItemProvider == null) {
			mouseOutListenerTypeItemProvider = new MouseOutListenerTypeItemProvider(this);
		}

		return mouseOutListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.MouseOverListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MouseOverListenerTypeItemProvider mouseOverListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.MouseOverListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMouseOverListenerTypeAdapter() {
		if (mouseOverListenerTypeItemProvider == null) {
			mouseOverListenerTypeItemProvider = new MouseOverListenerTypeItemProvider(this);
		}

		return mouseOverListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.MouseUpListenerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MouseUpListenerTypeItemProvider mouseUpListenerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.MouseUpListenerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMouseUpListenerTypeAdapter() {
		if (mouseUpListenerTypeItemProvider == null) {
			mouseUpListenerTypeItemProvider = new MouseUpListenerTypeItemProvider(this);
		}

		return mouseUpListenerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.NullPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullPropertyTypeItemProvider nullPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.NullPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullPropertyTypeAdapter() {
		if (nullPropertyTypeItemProvider == null) {
			nullPropertyTypeItemProvider = new NullPropertyTypeItemProvider(this);
		}

		return nullPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.NumericPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericPropertyTypeItemProvider numericPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.NumericPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericPropertyTypeAdapter() {
		if (numericPropertyTypeItemProvider == null) {
			numericPropertyTypeItemProvider = new NumericPropertyTypeItemProvider(this);
		}

		return numericPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ODMappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODMappingTypeItemProvider odMappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ODMappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODMappingTypeAdapter() {
		if (odMappingTypeItemProvider == null) {
			odMappingTypeItemProvider = new ODMappingTypeItemProvider(this);
		}

		return odMappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.OpCallAjaxType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpCallAjaxTypeItemProvider opCallAjaxTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.OpCallAjaxType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpCallAjaxTypeAdapter() {
		if (opCallAjaxTypeItemProvider == null) {
			opCallAjaxTypeItemProvider = new OpCallAjaxTypeItemProvider(this);
		}

		return opCallAjaxTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.OpExecuteScriptType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpExecuteScriptTypeItemProvider opExecuteScriptTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.OpExecuteScriptType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpExecuteScriptTypeAdapter() {
		if (opExecuteScriptTypeItemProvider == null) {
			opExecuteScriptTypeItemProvider = new OpExecuteScriptTypeItemProvider(this);
		}

		return opExecuteScriptTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.OpSetVariableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpSetVariableTypeItemProvider opSetVariableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.OpSetVariableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpSetVariableTypeAdapter() {
		if (opSetVariableTypeItemProvider == null) {
			opSetVariableTypeItemProvider = new OpSetVariableTypeItemProvider(this);
		}

		return opSetVariableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.OpType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpTypeItemProvider opTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.OpType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpTypeAdapter() {
		if (opTypeItemProvider == null) {
			opTypeItemProvider = new OpTypeItemProvider(this);
		}

		return opTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.PageInType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageInTypeItemProvider pageInTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.PageInType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageInTypeAdapter() {
		if (pageInTypeItemProvider == null) {
			pageInTypeItemProvider = new PageInTypeItemProvider(this);
		}

		return pageInTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.PageODMappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageODMappingTypeItemProvider pageODMappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.PageODMappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageODMappingTypeAdapter() {
		if (pageODMappingTypeItemProvider == null) {
			pageODMappingTypeItemProvider = new PageODMappingTypeItemProvider(this);
		}

		return pageODMappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.PageOutType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageOutTypeItemProvider pageOutTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.PageOutType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageOutTypeAdapter() {
		if (pageOutTypeItemProvider == null) {
			pageOutTypeItemProvider = new PageOutTypeItemProvider(this);
		}

		return pageOutTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.PropertyReconfigurationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyReconfigurationTypeItemProvider propertyReconfigurationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.PropertyReconfigurationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyReconfigurationTypeAdapter() {
		if (propertyReconfigurationTypeItemProvider == null) {
			propertyReconfigurationTypeItemProvider = new PropertyReconfigurationTypeItemProvider(this);
		}

		return propertyReconfigurationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.PropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyTypeItemProvider propertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.PropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyTypeAdapter() {
		if (propertyTypeItemProvider == null) {
			propertyTypeItemProvider = new PropertyTypeItemProvider(this);
		}

		return propertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ReconfigurableFunctionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReconfigurableFunctionTypeItemProvider reconfigurableFunctionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ReconfigurableFunctionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReconfigurableFunctionTypeAdapter() {
		if (reconfigurableFunctionTypeItemProvider == null) {
			reconfigurableFunctionTypeItemProvider = new ReconfigurableFunctionTypeItemProvider(this);
		}

		return reconfigurableFunctionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ReconfigurablePropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReconfigurablePropertyTypeItemProvider reconfigurablePropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ReconfigurablePropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReconfigurablePropertyTypeAdapter() {
		if (reconfigurablePropertyTypeItemProvider == null) {
			reconfigurablePropertyTypeItemProvider = new ReconfigurablePropertyTypeItemProvider(this);
		}

		return reconfigurablePropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ReconfigurableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReconfigurableTypeItemProvider reconfigurableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ReconfigurableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReconfigurableTypeAdapter() {
		if (reconfigurableTypeItemProvider == null) {
			reconfigurableTypeItemProvider = new ReconfigurableTypeItemProvider(this);
		}

		return reconfigurableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ReconfigurableVariableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReconfigurableVariableTypeItemProvider reconfigurableVariableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ReconfigurableVariableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReconfigurableVariableTypeAdapter() {
		if (reconfigurableVariableTypeItemProvider == null) {
			reconfigurableVariableTypeItemProvider = new ReconfigurableVariableTypeItemProvider(this);
		}

		return reconfigurableVariableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ReconfigurationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReconfigurationTypeItemProvider reconfigurationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ReconfigurationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReconfigurationTypeAdapter() {
		if (reconfigurationTypeItemProvider == null) {
			reconfigurationTypeItemProvider = new ReconfigurationTypeItemProvider(this);
		}

		return reconfigurationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ResourceBundlePropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceBundlePropertyTypeItemProvider resourceBundlePropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ResourceBundlePropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceBundlePropertyTypeAdapter() {
		if (resourceBundlePropertyTypeItemProvider == null) {
			resourceBundlePropertyTypeItemProvider = new ResourceBundlePropertyTypeItemProvider(this);
		}

		return resourceBundlePropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.SimpleComponentMappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleComponentMappingTypeItemProvider simpleComponentMappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.SimpleComponentMappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleComponentMappingTypeAdapter() {
		if (simpleComponentMappingTypeItemProvider == null) {
			simpleComponentMappingTypeItemProvider = new SimpleComponentMappingTypeItemProvider(this);
		}

		return simpleComponentMappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.StringPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringPropertyTypeItemProvider stringPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.StringPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringPropertyTypeAdapter() {
		if (stringPropertyTypeItemProvider == null) {
			stringPropertyTypeItemProvider = new StringPropertyTypeItemProvider(this);
		}

		return stringPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.TableLayoutConstraintType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableLayoutConstraintTypeItemProvider tableLayoutConstraintTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.TableLayoutConstraintType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableLayoutConstraintTypeAdapter() {
		if (tableLayoutConstraintTypeItemProvider == null) {
			tableLayoutConstraintTypeItemProvider = new TableLayoutConstraintTypeItemProvider(this);
		}

		return tableLayoutConstraintTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.TableLayoutType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableLayoutTypeItemProvider tableLayoutTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.TableLayoutType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableLayoutTypeAdapter() {
		if (tableLayoutTypeItemProvider == null) {
			tableLayoutTypeItemProvider = new TableLayoutTypeItemProvider(this);
		}

		return tableLayoutTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIButtonType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIButtonTypeItemProvider uiButtonTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIButtonType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIButtonTypeAdapter() {
		if (uiButtonTypeItemProvider == null) {
			uiButtonTypeItemProvider = new UIButtonTypeItemProvider(this);
		}

		return uiButtonTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UICheckBoxGroupType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UICheckBoxGroupTypeItemProvider uiCheckBoxGroupTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UICheckBoxGroupType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUICheckBoxGroupTypeAdapter() {
		if (uiCheckBoxGroupTypeItemProvider == null) {
			uiCheckBoxGroupTypeItemProvider = new UICheckBoxGroupTypeItemProvider(this);
		}

		return uiCheckBoxGroupTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UICheckBoxType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UICheckBoxTypeItemProvider uiCheckBoxTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UICheckBoxType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUICheckBoxTypeAdapter() {
		if (uiCheckBoxTypeItemProvider == null) {
			uiCheckBoxTypeItemProvider = new UICheckBoxTypeItemProvider(this);
		}

		return uiCheckBoxTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIComboBoxType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIComboBoxTypeItemProvider uiComboBoxTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIComboBoxType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIComboBoxTypeAdapter() {
		if (uiComboBoxTypeItemProvider == null) {
			uiComboBoxTypeItemProvider = new UIComboBoxTypeItemProvider(this);
		}

		return uiComboBoxTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIComponentParamType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIComponentParamTypeItemProvider uiComponentParamTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIComponentParamType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIComponentParamTypeAdapter() {
		if (uiComponentParamTypeItemProvider == null) {
			uiComponentParamTypeItemProvider = new UIComponentParamTypeItemProvider(this);
		}

		return uiComponentParamTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIDateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIDateTypeItemProvider uiDateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIDateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIDateTypeAdapter() {
		if (uiDateTypeItemProvider == null) {
			uiDateTypeItemProvider = new UIDateTypeItemProvider(this);
		}

		return uiDateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIEmptyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIEmptyTypeItemProvider uiEmptyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIEmptyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIEmptyTypeAdapter() {
		if (uiEmptyTypeItemProvider == null) {
			uiEmptyTypeItemProvider = new UIEmptyTypeItemProvider(this);
		}

		return uiEmptyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIEntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIEntityTypeItemProvider uiEntityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIEntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIEntityTypeAdapter() {
		if (uiEntityTypeItemProvider == null) {
			uiEntityTypeItemProvider = new UIEntityTypeItemProvider(this);
		}

		return uiEntityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIFileType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIFileTypeItemProvider uiFileTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIFileType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIFileTypeAdapter() {
		if (uiFileTypeItemProvider == null) {
			uiFileTypeItemProvider = new UIFileTypeItemProvider(this);
		}

		return uiFileTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIFrameType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIFrameTypeItemProvider uiFrameTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIFrameType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIFrameTypeAdapter() {
		if (uiFrameTypeItemProvider == null) {
			uiFrameTypeItemProvider = new UIFrameTypeItemProvider(this);
		}

		return uiFrameTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIHiddenType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIHiddenTypeItemProvider uiHiddenTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIHiddenType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIHiddenTypeAdapter() {
		if (uiHiddenTypeItemProvider == null) {
			uiHiddenTypeItemProvider = new UIHiddenTypeItemProvider(this);
		}

		return uiHiddenTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIImageType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIImageTypeItemProvider uiImageTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIImageType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIImageTypeAdapter() {
		if (uiImageTypeItemProvider == null) {
			uiImageTypeItemProvider = new UIImageTypeItemProvider(this);
		}

		return uiImageTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UILabelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UILabelTypeItemProvider uiLabelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UILabelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUILabelTypeAdapter() {
		if (uiLabelTypeItemProvider == null) {
			uiLabelTypeItemProvider = new UILabelTypeItemProvider(this);
		}

		return uiLabelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UILayoutType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UILayoutTypeItemProvider uiLayoutTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UILayoutType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUILayoutTypeAdapter() {
		if (uiLayoutTypeItemProvider == null) {
			uiLayoutTypeItemProvider = new UILayoutTypeItemProvider(this);
		}

		return uiLayoutTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UILinkType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UILinkTypeItemProvider uiLinkTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UILinkType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUILinkTypeAdapter() {
		if (uiLinkTypeItemProvider == null) {
			uiLinkTypeItemProvider = new UILinkTypeItemProvider(this);
		}

		return uiLinkTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIListType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIListTypeItemProvider uiListTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIListType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIListTypeAdapter() {
		if (uiListTypeItemProvider == null) {
			uiListTypeItemProvider = new UIListTypeItemProvider(this);
		}

		return uiListTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIMultiChoiceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIMultiChoiceTypeItemProvider uiMultiChoiceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIMultiChoiceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIMultiChoiceTypeAdapter() {
		if (uiMultiChoiceTypeItemProvider == null) {
			uiMultiChoiceTypeItemProvider = new UIMultiChoiceTypeItemProvider(this);
		}

		return uiMultiChoiceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIObjectListType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIObjectListTypeItemProvider uiObjectListTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIObjectListType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIObjectListTypeAdapter() {
		if (uiObjectListTypeItemProvider == null) {
			uiObjectListTypeItemProvider = new UIObjectListTypeItemProvider(this);
		}

		return uiObjectListTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIPageType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIPageTypeItemProvider uiPageTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIPageType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIPageTypeAdapter() {
		if (uiPageTypeItemProvider == null) {
			uiPageTypeItemProvider = new UIPageTypeItemProvider(this);
		}

		return uiPageTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIPanelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIPanelTypeItemProvider uiPanelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIPanelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIPanelTypeAdapter() {
		if (uiPanelTypeItemProvider == null) {
			uiPanelTypeItemProvider = new UIPanelTypeItemProvider(this);
		}

		return uiPanelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIPasswordFieldType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIPasswordFieldTypeItemProvider uiPasswordFieldTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIPasswordFieldType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIPasswordFieldTypeAdapter() {
		if (uiPasswordFieldTypeItemProvider == null) {
			uiPasswordFieldTypeItemProvider = new UIPasswordFieldTypeItemProvider(this);
		}

		return uiPasswordFieldTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIRadioButtonGroupType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIRadioButtonGroupTypeItemProvider uiRadioButtonGroupTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIRadioButtonGroupType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIRadioButtonGroupTypeAdapter() {
		if (uiRadioButtonGroupTypeItemProvider == null) {
			uiRadioButtonGroupTypeItemProvider = new UIRadioButtonGroupTypeItemProvider(this);
		}

		return uiRadioButtonGroupTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIRadioButtonType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIRadioButtonTypeItemProvider uiRadioButtonTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIRadioButtonType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIRadioButtonTypeAdapter() {
		if (uiRadioButtonTypeItemProvider == null) {
			uiRadioButtonTypeItemProvider = new UIRadioButtonTypeItemProvider(this);
		}

		return uiRadioButtonTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIReferenceEntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIReferenceEntityTypeItemProvider uiReferenceEntityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIReferenceEntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIReferenceEntityTypeAdapter() {
		if (uiReferenceEntityTypeItemProvider == null) {
			uiReferenceEntityTypeItemProvider = new UIReferenceEntityTypeItemProvider(this);
		}

		return uiReferenceEntityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UISkinType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UISkinTypeItemProvider uiSkinTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UISkinType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUISkinTypeAdapter() {
		if (uiSkinTypeItemProvider == null) {
			uiSkinTypeItemProvider = new UISkinTypeItemProvider(this);
		}

		return uiSkinTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UITabPaneItemType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UITabPaneItemTypeItemProvider uiTabPaneItemTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UITabPaneItemType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUITabPaneItemTypeAdapter() {
		if (uiTabPaneItemTypeItemProvider == null) {
			uiTabPaneItemTypeItemProvider = new UITabPaneItemTypeItemProvider(this);
		}

		return uiTabPaneItemTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UITabPaneType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UITabPaneTypeItemProvider uiTabPaneTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UITabPaneType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUITabPaneTypeAdapter() {
		if (uiTabPaneTypeItemProvider == null) {
			uiTabPaneTypeItemProvider = new UITabPaneTypeItemProvider(this);
		}

		return uiTabPaneTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UITextAreaType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UITextAreaTypeItemProvider uiTextAreaTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UITextAreaType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUITextAreaTypeAdapter() {
		if (uiTextAreaTypeItemProvider == null) {
			uiTextAreaTypeItemProvider = new UITextAreaTypeItemProvider(this);
		}

		return uiTextAreaTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UITextFieldType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UITextFieldTypeItemProvider uiTextFieldTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UITextFieldType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUITextFieldTypeAdapter() {
		if (uiTextFieldTypeItemProvider == null) {
			uiTextFieldTypeItemProvider = new UITextFieldTypeItemProvider(this);
		}

		return uiTextFieldTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIWebMenuType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIWebMenuTypeItemProvider uiWebMenuTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIWebMenuType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIWebMenuTypeAdapter() {
		if (uiWebMenuTypeItemProvider == null) {
			uiWebMenuTypeItemProvider = new UIWebMenuTypeItemProvider(this);
		}

		return uiWebMenuTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.UIWebTreeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIWebTreeTypeItemProvider uiWebTreeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.UIWebTreeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIWebTreeTypeAdapter() {
		if (uiWebTreeTypeItemProvider == null) {
			uiWebTreeTypeItemProvider = new UIWebTreeTypeItemProvider(this);
		}

		return uiWebTreeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ValidatorPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidatorPropertyTypeItemProvider validatorPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ValidatorPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidatorPropertyTypeAdapter() {
		if (validatorPropertyTypeItemProvider == null) {
			validatorPropertyTypeItemProvider = new ValidatorPropertyTypeItemProvider(this);
		}

		return validatorPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.ValidatorsPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidatorsPropertyTypeItemProvider validatorsPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.ValidatorsPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidatorsPropertyTypeAdapter() {
		if (validatorsPropertyTypeItemProvider == null) {
			validatorsPropertyTypeItemProvider = new ValidatorsPropertyTypeItemProvider(this);
		}

		return validatorsPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.shaolin.uimaster.datamodel.page.VariableReconfigurationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableReconfigurationTypeItemProvider variableReconfigurationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.shaolin.uimaster.datamodel.page.VariableReconfigurationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableReconfigurationTypeAdapter() {
		if (variableReconfigurationTypeItemProvider == null) {
			variableReconfigurationTypeItemProvider = new VariableReconfigurationTypeItemProvider(this);
		}

		return variableReconfigurationTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (arrayPropertyTypeItemProvider != null) arrayPropertyTypeItemProvider.dispose();
		if (booleanPropertyTypeItemProvider != null) booleanPropertyTypeItemProvider.dispose();
		if (callComponentMappingOpItemProvider != null) callComponentMappingOpItemProvider.dispose();
		if (clickListenerTypeItemProvider != null) clickListenerTypeItemProvider.dispose();
		if (clientActionTypeItemProvider != null) clientActionTypeItemProvider.dispose();
		if (colorPropertyTypeItemProvider != null) colorPropertyTypeItemProvider.dispose();
		if (componentConstraintTypeItemProvider != null) componentConstraintTypeItemProvider.dispose();
		if (componentParamTypeItemProvider != null) componentParamTypeItemProvider.dispose();
		if (customListenerTypeItemProvider != null) customListenerTypeItemProvider.dispose();
		if (datePropertyTypeItemProvider != null) datePropertyTypeItemProvider.dispose();
		if (dblClickListenerTypeItemProvider != null) dblClickListenerTypeItemProvider.dispose();
		if (directComponentMappingTypeItemProvider != null) directComponentMappingTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (entityPropertyTypeItemProvider != null) entityPropertyTypeItemProvider.dispose();
		if (eventListenerTypeItemProvider != null) eventListenerTypeItemProvider.dispose();
		if (expressionParamTypeItemProvider != null) expressionParamTypeItemProvider.dispose();
		if (expressionPropertyTypeItemProvider != null) expressionPropertyTypeItemProvider.dispose();
		if (fontPropertyTypeItemProvider != null) fontPropertyTypeItemProvider.dispose();
		if (functionCallTypeItemProvider != null) functionCallTypeItemProvider.dispose();
		if (functionReconfigurationTypeItemProvider != null) functionReconfigurationTypeItemProvider.dispose();
		if (functionTypeItemProvider != null) functionTypeItemProvider.dispose();
		if (imagePropertyTypeItemProvider != null) imagePropertyTypeItemProvider.dispose();
		if (itemChangeListenerTypeItemProvider != null) itemChangeListenerTypeItemProvider.dispose();
		if (keyDownListenerTypeItemProvider != null) keyDownListenerTypeItemProvider.dispose();
		if (keyPressListenerTypeItemProvider != null) keyPressListenerTypeItemProvider.dispose();
		if (keyUpListenerTypeItemProvider != null) keyUpListenerTypeItemProvider.dispose();
		if (mouseDownListenerTypeItemProvider != null) mouseDownListenerTypeItemProvider.dispose();
		if (mouseOutListenerTypeItemProvider != null) mouseOutListenerTypeItemProvider.dispose();
		if (mouseOverListenerTypeItemProvider != null) mouseOverListenerTypeItemProvider.dispose();
		if (mouseUpListenerTypeItemProvider != null) mouseUpListenerTypeItemProvider.dispose();
		if (nullPropertyTypeItemProvider != null) nullPropertyTypeItemProvider.dispose();
		if (numericPropertyTypeItemProvider != null) numericPropertyTypeItemProvider.dispose();
		if (odMappingTypeItemProvider != null) odMappingTypeItemProvider.dispose();
		if (opCallAjaxTypeItemProvider != null) opCallAjaxTypeItemProvider.dispose();
		if (opExecuteScriptTypeItemProvider != null) opExecuteScriptTypeItemProvider.dispose();
		if (opSetVariableTypeItemProvider != null) opSetVariableTypeItemProvider.dispose();
		if (opTypeItemProvider != null) opTypeItemProvider.dispose();
		if (pageInTypeItemProvider != null) pageInTypeItemProvider.dispose();
		if (pageODMappingTypeItemProvider != null) pageODMappingTypeItemProvider.dispose();
		if (pageOutTypeItemProvider != null) pageOutTypeItemProvider.dispose();
		if (propertyReconfigurationTypeItemProvider != null) propertyReconfigurationTypeItemProvider.dispose();
		if (propertyTypeItemProvider != null) propertyTypeItemProvider.dispose();
		if (reconfigurableFunctionTypeItemProvider != null) reconfigurableFunctionTypeItemProvider.dispose();
		if (reconfigurablePropertyTypeItemProvider != null) reconfigurablePropertyTypeItemProvider.dispose();
		if (reconfigurableTypeItemProvider != null) reconfigurableTypeItemProvider.dispose();
		if (reconfigurableVariableTypeItemProvider != null) reconfigurableVariableTypeItemProvider.dispose();
		if (reconfigurationTypeItemProvider != null) reconfigurationTypeItemProvider.dispose();
		if (resourceBundlePropertyTypeItemProvider != null) resourceBundlePropertyTypeItemProvider.dispose();
		if (simpleComponentMappingTypeItemProvider != null) simpleComponentMappingTypeItemProvider.dispose();
		if (stringPropertyTypeItemProvider != null) stringPropertyTypeItemProvider.dispose();
		if (tableLayoutConstraintTypeItemProvider != null) tableLayoutConstraintTypeItemProvider.dispose();
		if (tableLayoutTypeItemProvider != null) tableLayoutTypeItemProvider.dispose();
		if (uiButtonTypeItemProvider != null) uiButtonTypeItemProvider.dispose();
		if (uiCheckBoxGroupTypeItemProvider != null) uiCheckBoxGroupTypeItemProvider.dispose();
		if (uiCheckBoxTypeItemProvider != null) uiCheckBoxTypeItemProvider.dispose();
		if (uiComboBoxTypeItemProvider != null) uiComboBoxTypeItemProvider.dispose();
		if (uiComponentParamTypeItemProvider != null) uiComponentParamTypeItemProvider.dispose();
		if (uiDateTypeItemProvider != null) uiDateTypeItemProvider.dispose();
		if (uiEmptyTypeItemProvider != null) uiEmptyTypeItemProvider.dispose();
		if (uiEntityTypeItemProvider != null) uiEntityTypeItemProvider.dispose();
		if (uiFileTypeItemProvider != null) uiFileTypeItemProvider.dispose();
		if (uiFrameTypeItemProvider != null) uiFrameTypeItemProvider.dispose();
		if (uiHiddenTypeItemProvider != null) uiHiddenTypeItemProvider.dispose();
		if (uiImageTypeItemProvider != null) uiImageTypeItemProvider.dispose();
		if (uiLabelTypeItemProvider != null) uiLabelTypeItemProvider.dispose();
		if (uiLayoutTypeItemProvider != null) uiLayoutTypeItemProvider.dispose();
		if (uiLinkTypeItemProvider != null) uiLinkTypeItemProvider.dispose();
		if (uiListTypeItemProvider != null) uiListTypeItemProvider.dispose();
		if (uiMultiChoiceTypeItemProvider != null) uiMultiChoiceTypeItemProvider.dispose();
		if (uiObjectListTypeItemProvider != null) uiObjectListTypeItemProvider.dispose();
		if (uiPageTypeItemProvider != null) uiPageTypeItemProvider.dispose();
		if (uiPanelTypeItemProvider != null) uiPanelTypeItemProvider.dispose();
		if (uiPasswordFieldTypeItemProvider != null) uiPasswordFieldTypeItemProvider.dispose();
		if (uiRadioButtonGroupTypeItemProvider != null) uiRadioButtonGroupTypeItemProvider.dispose();
		if (uiRadioButtonTypeItemProvider != null) uiRadioButtonTypeItemProvider.dispose();
		if (uiReferenceEntityTypeItemProvider != null) uiReferenceEntityTypeItemProvider.dispose();
		if (uiSkinTypeItemProvider != null) uiSkinTypeItemProvider.dispose();
		if (uiTabPaneItemTypeItemProvider != null) uiTabPaneItemTypeItemProvider.dispose();
		if (uiTabPaneTypeItemProvider != null) uiTabPaneTypeItemProvider.dispose();
		if (uiTextAreaTypeItemProvider != null) uiTextAreaTypeItemProvider.dispose();
		if (uiTextFieldTypeItemProvider != null) uiTextFieldTypeItemProvider.dispose();
		if (uiWebMenuTypeItemProvider != null) uiWebMenuTypeItemProvider.dispose();
		if (uiWebTreeTypeItemProvider != null) uiWebTreeTypeItemProvider.dispose();
		if (validatorPropertyTypeItemProvider != null) validatorPropertyTypeItemProvider.dispose();
		if (validatorsPropertyTypeItemProvider != null) validatorsPropertyTypeItemProvider.dispose();
		if (variableReconfigurationTypeItemProvider != null) variableReconfigurationTypeItemProvider.dispose();
	}

}
